/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p sap_interface sapwindow.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SAP_INTERFACE_H
#define SAP_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface local.SapWindow
 */
class LocalSapWindowInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "local.SapWindow"; }

public:
    LocalSapWindowInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~LocalSapWindowInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString, int> SendAutrgNrRecive()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("SendAutrgNrRecive"), argumentList);
    }
    inline QDBusReply<QString> SendAutrgNrRecive(int &in_iAuftrNr)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("SendAutrgNrRecive"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            in_iAuftrNr = qdbus_cast<int>(reply.arguments().at(1));
        }
        return reply;
    }

Q_SIGNALS: // SIGNALS
};

namespace local {
  typedef ::LocalSapWindowInterface SapWindow;
}
#endif
